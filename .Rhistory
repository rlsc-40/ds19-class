source("Users/rebecca/Desktop/DS19-class/ds19-class/code/fetch_biketown.R")
source("Home/Desktop/DS19-class/ds19-class/code/fetch_biketown.R")
source("/Home/Desktop/DS19-class/ds19-class/code/fetch_biketown.R")
getwd()
getpwd
pwd
source("/Users/rebecca/Desktop/DS19-class/ds19-class/code/fetch_biketown.R")
get_data(start = "06/2018", end = "09/2018")
get_data(start = "06/2018", end = "09/2018", outdir = outdir)
get_data(start = "06/2018", end = "09/2018")
outdir = "data/biketown/"
get_data(start = "06/2018", end = "09/2018", outdir = outdir)
outdir = "/data/biketown/"
get_data(start = "06/2018", end = "09/2018", outdir = outdir)
getwd()
knitr::opts_chunk$set(echo = TRUE, root.dir = "/Users/rebecca/Desktop/DS19-class/ds19-class/")
get_data(start = "06/2018", end = "09/2018")
get_data(start = "06/2018", end = "09/2018")
get_data(start = "06/2018", end = "09/2018", outdir = "/Users/rebecca/Desktop/DS19-class/ds19-class/data/biketown/")
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE, root.dir = "/Users/rebecca/Desktop/DS19-class/ds19-class/")
install.packages("lubridate")
install.packages("dplyr")
install.packages("ggplot2")
library(lubridate)
library(deplyr)
setwd("/Users/rebecca/Desktop/DS19-class/ds19-class/data/biketown")
folder <- "/Users/rebecca/Desktop/DS19-class/ds19-class/data/biketown"
filenames <- list.files(path = folder, pattern = "*.csv", all.files = FALSE,
full.names = FALSE, recursive = FALSE, ignore.case = FALSE)
bike_raw <- plyr::ldply(filenames, read_csv_filename)
read_csv_filename <- function(filenames) {
ret <- read.csv(filenames, stringsAsFactors = F, strip.white = T, na.strings = "")
ret$Source <- filenames
ret
}
bike_raw <- plyr::ldply(filenames, read_csv_filename)
bike_raw <- plyr::ldply(filenames, read_csv_filename)
setwd("/Users/rebecca/Desktop/DS19-class/ds19-class/data/biketown/")
folder <- "/Users/rebecca/Desktop/DS19-class/ds19-class/data/biketown/"
filenames <- list.files(path = folder, pattern = "*.csv", all.files = FALSE,
full.names = FALSE, recursive = FALSE, ignore.case = FALSE)
read_csv_filename <- function(filenames) {
ret <- read.csv(filenames, stringsAsFactors = F, strip.white = T, na.strings = "")
ret$Source <- filenames
ret
}
bike_raw <- plyr::ldply(filenames, read_csv_filename)
# After calling in all your files, use bind_rows()
bike_raw <- bind_rows(file1, file2, file3, file4)
View(bike_raw)
knitr::opts_chunk$set(echo = TRUE, root.dir = "/Users/rebecca/Desktop/DS19-class/ds19-class/")
install.packages("lubridate")
install.packages("dplyr")
install.packages("ggplot2")
library(lubridate)
library(deplyr)
library(dplyr)
library(ggplot2)
str(bike_raw)
bike_df1 <- bike_raw %>%
mutate(start.datetime = paste(StartDate, StartTime, sep = " "),
end.datetime = paste(EndDate, EndTime, sep = " "))
# paste0 means no spaces in betweeen
str(bike_df1)
# convert start.datetime and end.datetime into date-time format,
# make sure to include timezone!
# check acceptable timezone values
OlsonNames()
# 587, US Pacific
head(bike_df1$start.datetime)
# hm for hour:minutes, hms for hour: minute:sec
bike_df1$start.datetime <- mdy_hm(bike_df1$start.datetime)
bike_df1$end.datetime <- mdy_hm(bike_df1$end.datetime)
str(bike_df1)
# convert duration into a useable format
bike_df1$Duration <- hms(bike_df1$Duration)
# Error thrown after converting to duration indicating N/As in the duration column,
# Check raw dataframe for NAs in the Duration column
sum(is.na(bike_raw$Duration))
View(bike_df1)
bike_df1$interval <- interval(bike_df1$start.datetime, bike_df1$end.datetime)
head(bike_df1$interval)
bike_df1$interval <- interval(bike_df1$start.datetime, bike_df1$end.datetime, tz = "America/Los_Angeles")
head(bike_df1$interval)
bike_df1 <- bike_raw %>%
mutate(start.datetime = paste(StartDate, StartTime, sep = " ", tz = "America/Los_Angeles"),
end.datetime = paste(EndDate, EndTime, sep = " ", tz = "America/Los_Angeles"))
bike_df1$start.datetime <- mdy_hm(bike_df1$start.datetime)
bike_df1$end.datetime <- mdy_hm(bike_df1$end.datetime)
bike_df1$interval <- interval(bike_df1$start.datetime, bike_df1$end.datetime)
head(bike_df1$interval)
bike_df1 <- bike_raw %>%
mutate(start.datetime = paste(StartDate, StartTime, sep = " "),
end.datetime = paste(EndDate, EndTime, sep = " "))
bike_df1$start.datetime <- mdy_hm(bike_df1$start.datetime, tz = "America/Los_Angeles")
bike_df1$end.datetime <- mdy_hm(bike_df1$end.datetime, tz = "America/Los_Angeles")
bike_df1$Duration <- hms(bike_df1$Duration)
bike_df1$interval <- interval(bike_df1$start.datetime, bike_df1$end.datetime)
head(bike_df1$interval)
# Calulate duration
bike_df1$duration.all <- as.duration(bike_df1$interval)
head(bike_df1$duration.all)
# Calculate period
bike_df1$period <- as.period(bike_df1$duration.all)
head(bike_df1$period)
# lubridate also handles time aggregation really well
# floor date() is helpful for aggregating
bike_wkagg <- bike_df1 %>%
mutate(week.datetime = floor_date(start.datetime, unit = "week"))
# also, ceiling date, rolling date
head(bike_wkagg$week.datetime)
View(bike_wkagg)
# also, ceiling date, rolling date
mean_dist_wk <- bike_wkagg %>%
group_by(week.datetime) %>%
summarise(mean_miles = mean(Distance_Miles))
mean_dist_wk
mdw_fig <- mean_dist_wk %>%
ggplot(aes(x = week.datetime, y = mean_miles, fill = week.datetime)) +
geom_bar(stat = "identity")
# fill is how to make it colored; can customize via more in-depth exploration
mdw_fig
mdw_fig2 <- mean_dist_wk %>%
ggplot(aes(x = as.Date(week.datetime), y = mean_miles, fill = week.datetime)) +
geom_bar(stat = "identity", fill = "blue") +
scale_x_date(date_breaks = "1 week") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
mdw_fig2
mdw_fig2 <- mean_dist_wk %>%
ggplot(aes(x = as.Date(week.datetime), y = mean_miles)) +
geom_bar(stat = "identity", fill = "blue") +
scale_x_date(date_breaks = "1 week") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
mdw_fig2
git status
knitr::opts_chunk$set(echo = TRUE)
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(lubridate)
library(ggplot2)
install.packages("DT")
library(DT)
install.packages("ggthemes")
library(ggthemes)
library(extrafont)
install.packages("extrafont")
datatable(mean_dist, options = list(
pagelength = 15),
caption = 'Table 1: Table of values'
)
library(readxl)
install.packages("readxl")
library(readxl)
library(lubridate)
library(dplyr)
library(readr)
getwd()
cd ..
cd ..
getwd()
# Jenny Bryan @ UBC
# Hadley Wickam
setwd("Users/rebecca/DS19-class/ds19-class/")
# Jenny Bryan @ UBC
# Hadley Wickam
setwd("Users/rebecca/DS19-class/ds19-class/")
getwd()
# Jenny Bryan @ UBC
# Hadley Wickam
setwd("~Users/rebecca/DS19-class/ds19-class/")
setwd("~/Desktop/DS19-class/ds19-class/data")
setwd("~/Desktop/DS19-class/ds19-class")
input_file <- "data/Hawthorne Tilikum Steel daily bike counts 073118.xlsx"
bridge_names <- c("Hawthorne", "Tilikum", "Steel")
# define a function that loads excel sheets
load_data <- function(bridge_name, input_file) {
bikecounts <- read_excel(input_file, sheet = bridge_name,
skip = 1) %>%
filter(total > 0) %>%
select(date, total) %>%
mutate(bridge = bridge_name, date = as.Date(date)) # drops useless time
}
h <- load_data("Hawthorne", input_file)
h <- load_data("Hawthorne", input_file)
input_file <- "data/Hawthorne Tilikum Steel daily bike counts 073118.xlsx"
bridge_names <- c("Hawthorne", "Tilikum", "Steel")
# define a function that loads excel sheets
load_data <- function(bridge_name, input_file) {
bikecounts <- read_excel(input_file, sheet = bridge_name,
skip = 1) %>%
filter(total > 0) %>%
select(date, total) %>%
mutate(bridge = bridge_name, date = as.Date(date)) # drops useless time
}
h <- load_data("Hawthorne", input_file)
input_file <- "data/Hawthorne Tilikum Steel daily bike counts 073118.xlsx"
bridge_names <- c("Hawthorne", "Tilikum", "Steel")
bikecounts <- read_excel(input_file, sheet = bridge_name,
skip = 1) %>%
filter(total > 0) %>%
select(date, total) %>%
mutate(bridge = bridge_name, date = as.Date(date)) # drops useless time
load_data <- function(bridge_name, input_file) {
bikecounts <- read_excel(input_file, sheet = bridge_name,
skip = 1) %>%
filter(total > 0) %>%
select(date, total) %>%
mutate(bridge = bridge_name, date = as.Date(date)) # drops useless time
}
h <- load_data("Hawthorne", input_file)
input_file <- "data/Hawthorne Tilikum Steel daily bike counts 073118.xlsx"
bridge_names <- c("Hawthorne", "Tilikum", "Steel")
# define a function that loads excel sheets
load_data <- function(bridge_name, input_file) {
bikecounts <- read_excel(input_file, sheet = bridge_name,
skip = 1) %>%
filter(total > 0) %>%
select(date, total) %>%
mutate(bridge = bridge_name, date = as.Date(date)) # drops useless time
}
h <- load_data("Hawthorne", input_file)
library(dplyr)
# define a function that loads excel sheets
load_data <- function(bridge_name, input_file) {
bikecounts <- read_excel(input_file, sheet = bridge_name,
skip = 1) %>%
filter(total > 0) %>%
select(date, total) %>%
mutate(bridge = bridge_name, date = as.Date(date)) # drops useless time
}
h <- load_data("Hawthorne", input_file)
library(readxl)
library(lubridate)
library(readr)
# define a function that loads excel sheets
load_data <- function(bridge_name, input_file) {
bikecounts <- read_excel(input_file, sheet = bridge_name,
skip = 1) %>%
filter(total > 0) %>%
select(date, total) %>%
mutate(bridge = bridge_name, date = as.Date(date)) # drops useless time
}
h <- load_data("Hawthorne", input_file)
View(h)
bikecounts <- lapply(bridge_names, load_data, input_file = input_file) %>%
bind_rows()
View(bikecounts)
head(bikecounts)
tail(bikecounts)
# factorize bridge name, since here it makes sense to do so
bikecounts <- bikecounts %>% mutate(bridge = factor(bridge))
# read in weather data
weather <- read_csv("data/NCDC-CDO-USC00356750.csv")
# read in weather data
weather <- read_csv("data/NCDC-CDO-USC00356750.csv")
View(weather)
knitr::opts_chunk$set(echo = TRUE)
# Joe wonders if some commuters are more weather-resistant than others
source("code/load_counts_R.R")
install.packages("readxl")
# Joe wonders if some commuters are more weather-resistant than others
library(lubridate)
library(ggplot2)
library(modelr)
install.packages("modelr")
library(modelr)
library(purrr)
library(broom)
View(weather)
# anti_join shows what is missing between two tables that contain the same info (good for qa/qc)
# semi_join good for getting everything that matches between two tables
bikecount_wx <- bikecounts %>%
left_join(weather, by = c("date" = "DATE")) %>%
select(date, bridge, total, TMIN, TMAX, PRCP)
knitr::opts_chunk$set(echo = TRUE)
# Joe wonders if some commuters are more weather-resistant than others
library(lubridate)
library(ggplot2)
install.packages("modelr")
library(modelr)
library(purrr)
library(broom)
install.packages("modelr")
library(dplyr)
# anti_join shows what is missing between two tables that contain the same info (good for qa/qc)
# semi_join good for getting everything that matches between two tables
bikecount_wx <- bikecounts %>%
left_join(weather, by = c("date" = "DATE")) %>%
select(date, bridge, total, TMIN, TMAX, PRCP)
View(bikecount_wx)
ggplot(bikecount_wx, aes(x = date, y = total,
group = bridge, color = bridge)) +
geom_line()
library(ggplot2)
ggplot(bikecount_wx, aes(x = date, y = total,
group = bridge, color = bridge)) +
geom_line()
ggplot(bikecount_wx, aes(x = date, y = total,
group = bridge, color = bridge)) +
geom_line() + facet_wrap(bikecount_wx$bridge)
bikecount_wx %>% ggplot(aes(x = date, y = total,
group = bridge, color = bridge)) +
geom_line() + facet_wrap(bridge ~ .)
bikecount_wx %>% ggplot(aes(x = date, y = total,
group = bridge, color = bridge)) +
geom_line() + facet_grid(bridge ~ .)
# this way stacks the facets, looks better for current plot
bikecount_wx %>% ggplot(aes(x = date, y = total,
group = bridge, color = bridge)) +
geom_line() + facet_grid(bridge ~ .) + ylim(10000)
# this way stacks the facets, looks better for current plot
bikecount_wx %>% ggplot(aes(x = date, y = total,
group = bridge, color = bridge)) +
geom_line() + facet_grid(bridge ~ .) + ylim(c(0, 10000))
# average daily count by bridge
bikecount_wx %>%
group_by(bridge) %>%
summarise(avg_daily_counts = mean(total))
bikecount_wx %>%
group_by(bridge, month(date), year(date)) %>%
summarise(avg_monthly_counts = mean(total)) %>%
View()
summarise(avg_monthly_counts = mean(total))
# Joe wonders if some commuters are more weather-resistant than others
library(lubridate)
# Average monthly by bridge
bikecount_wx %>%
group_by(bridge, month(date), year(date)) %>%
summarise(avg_monthly_counts = mean(total)) %>%
View()
summarise(avg_monthly_counts = mean(total))
# Daily average by month all time by bridge
avg_monthly <- bikecount_wx %>%
group_by(bridge, month(date, label = T)) %>%
summarise(avg_monthly_counts = mean(total))
View(avg_monthly)
# Daily average by month all time by bridge
avg_monthly <- bikecount_wx %>%
group_by(bridge, month = month(date, label = T)) %>%
summarise(avg_monthly_counts = mean(total))
# Daily average by month all time by bridge
avg_monthly <- bikecount_wx %>%
group_by(bridge, month = month(date, label = T)) %>%
summarise(avg_monthly_counts = mean(total)) %>%
as.data.frame()
str(avg_monthly)
ggplot(avg_monthly, aes(x = month,
y = avg_monthly_counts,
color = bridge)) +
geom_point()
ggplot(avg_monthly, aes(x = month,
y = avg_monthly_counts,
color = bridge)) +
geom_point(size = 2)
# models return list objects describing fit
fit <- lm(total ~ TMIN + TMAX + PRCP + bridge,
data = bikecount_wx)
# base r for fitting linear model: lm(dependent ~ predictors, data = dataframe)
str(fit)
# lots of detail, but not super accessible
summary(fit)
# summary table of regression results
plot(fit)
# a few summary plots to show us the fit in base R
fit2 <- lm(log(total) ~ TMIN + TMAX + PRCP + bridge,
data = bikecount_wx)
summary(fit2)
plot(fit2)
lm(total ~ TMIN + TMAX + I(TMAX^2) + PRCP + bridge,
data = bikecount_wx) %>% summary()
fit_poly <- lm(total ~ TMIN + TMAX + I(TMAX^2) + PRCP + bridge,
data = bikecount_wx)
coef(fit_poly)
f <- function(x) {198 * x + -0.99 * x^2}
p <- ggplot(data = data.frame(x = 0), # empty data frame
mapping = aes(x = x))
p + stat_function(fun = f, color="magenta", size=2) +
xlim(0, 110)
p + stat_function(fun = f, color = "magenta", size = 2) +
xlim(0, 110) + xlab("Deg F") + ylab("Count")
View(bikecount_wx)
p + stat_function(fun = f, color = "magenta", size = 1) +
xlim(0, 110) + xlab("Deg F") + ylab("Count")
bikecount_wx <- bikecount_wx %>%
add_predictions(fit_poly) %>%
mutate(pred = pred)
library(modelr)
bikecount_wx <- bikecount_wx %>%
add_predictions(fit_poly) %>%
mutate(pred = pred)
head(bikecount_wx)
View(fit_poly)
bikecount_wx <- bikecount_wx %>%
add_predictions(fit_poly) %>%
mutate(pred = pred, resid = resid)
bikecount_wx <- bikecount_wx %>%
add_predictions(fit_poly) %>%
mutate(pred = pred, resid = resid)
bikecount_wx <- bikecount_wx %>%
add_predictions(fit_poly) %>%
mutate(pred = pred)
bikecount_wx <- bikecount_wx %>%
add_predictions(fit_poly) %>%
add_residuals(fit_poly) %>%
mutate(pred = pred, resid = resid)
head(bikecount_wx)
ggplot() +
geom_line(data = bikecount_wx, aes(x = date, y = total),
color = "salmon") +
geom_line(data = bikecount_wx, aes(x = date, y = pred),
color = "blue") +
facet_grid(bridge ~.) +
ylim(c(0, 10000))
ggplot() +
geom_line(data = bikecount_wx, aes(x = date, y = total),
color = "salmon") +
geom_line(data = bikecount_wx, aes(x = date, y = pred),
color = "blue") +
facet_grid(bridge ~ ., scales = "free")
bw_nested <- bikecount_wx %>%
group_by(bridge) %>%
nest()
library(tidyr)
bw_nested <- bikecount_wx %>%
group_by(bridge) %>%
nest()
View(bw_nested)
str(bw_nested)
view(bw_nested)
View(bw_nested)
# fit to single bridge
lm(total ~ TMIN + TMAX + PRCP + bridge,
data = bw_nested[[1, "data"]]) %>%
summary()
# fit to single bridge
lm(total ~ TMIN + TMAX + PRCP,
data = bw_nested[[1, "data"]]) %>%
summary()
lm(total ~ TMIN + TMAX + PRCP,
data = bw_nested[[2, "data"]]) %>%
summary()
# to check:
bw_nested[1]
# fit to all three bridges
fit_func <- function(df) {
lm(total ~ TMIN + TMAX + PRCP,
data = df)
}
fit_func(bw_nested[[1, "data"]])
library(purrr)
# two at a time!
fits <- purrr::map(bw_nested$data[1:2],
fit_func)
fits
str(fits)
# threee at a time!
bw_nested <- bw_nested %>%
mutate(fit = purrr::map(data, fit_func),
tidy = purrr::map(fit, tidy),
glance = purrr::map(fit, glance))
library(tidyr)
# threee at a time!
bw_nested <- bw_nested %>%
mutate(fit = purrr::map(data, fit_func),
tidy = purrr::map(fit, tidy),
glance = purrr::map(fit, glance))
library(modelr)
library(purrr)
library(broom)
library(dplyr)
library(tidyr)
# threee at a time!
bw_nested <- bw_nested %>%
mutate(fit = purrr::map(data, fit_func),
tidy = purrr::map(fit, tidy),
glance = purrr::map(fit, glance))
head(bw_nested)
broom::tidy(bw_nested$fit[[1]])
arrange(desc(rsquared)
# unpack for all 3
bw_nested %>%
# unpack for all 3
bw_nested %>%
unnest(glance) %>%
arrange(desc(rsquared))
# unpack for all 3
bw_nested %>%
unnest(glance) %>%
arrange(desc(r.squared))
bw_nested %>%
select(bridge, tidy) %>%
unnest(tidy) %>%
arrange(term, estimate, bridge)
# Let's make it more relative
fit_func2 <- function(df) {
lm(log(total) ~ TMIN + TMAX + PRCP,
data = df)
}
bw_nested <- bikecount_wx %>%
group_by(bridge) %>%
nest()
bw_nested <- bw_nested %>%
mutate(fit = purrr::map(data, fit_func2),
tidy = purrr::map(fit, tidy),
glance = purrr::map(fit, glance))
bw_nested %>%
select(bridge, tidy) %>%
unnest(tidy) %>%
arrange(term, estimate, bridge) %>%
View()
